/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Yury Kudryashov
-/
import measure_theory.measure_space
import analysis.normed_space.finite_dimension
/-!
# Borel (measurable) space

## Main definitions

* `borel Œ±` : the least `œÉ`-algebra that contains all open sets;
* `class borel_space` : a space with `topological_space` and `measurable_space` structures
  such that `‚Äπmeasurable_space Œ±‚Ä∫ = borel Œ±`;
* `class opens_measurable_space` : a space with `topological_space` and `measurable_space`
  structures such that all open sets are measurable; equivalently, `borel Œ± ‚â§ ‚Äπmeasurable_space Œ±‚Ä∫`.
* `borel_space` instances on `empty`, `unit`, `bool`, `nat`, `int`, `rat`;
* `measurable` and `borel_space` instances on `‚Ñù`, `‚Ñù‚â•0`, `ennreal`.
* A measure is `regular` if it is finite on compact sets, inner regular and outer regular.

## Main statements

* `is_open.is_measurable`, `is_closed.is_measurable`: open and closed sets are measurable;
* `continuous.measurable` : a continuous function is measurable;
* `continuous.measurable2` : if `f : Œ± ‚Üí Œ≤` and `g : Œ± ‚Üí Œ≥` are measurable and `op : Œ≤ √ó Œ≥ ‚Üí Œ¥`
  is continuous, then `Œª x, op (f x, g y)` is measurable;
* `measurable.add` etc : dot notation for arithmetic operations on `measurable` predicates,
  and similarly for `dist` and `edist`;
* `measurable.ennreal*` : special cases for arithmetic operations on `ennreal`s.
-/

noncomputable theory

open classical set filter
open_locale classical big_operators topological_space nnreal

universes u v w x y
variables {Œ± Œ≤ Œ≥ Œ¥ : Type*} {Œπ : Sort y} {s t u : set Œ±}

open measurable_space topological_space

/-- `measurable_space` structure generated by `topological_space`. -/
def borel (Œ± : Type u) [topological_space Œ±] : measurable_space Œ± :=
generate_from {s : set Œ± | is_open s}

lemma borel_eq_top_of_discrete [topological_space Œ±] [discrete_topology Œ±] :
  borel Œ± = ‚ä§ :=
top_le_iff.1 $ Œª s hs, generate_measurable.basic s (is_open_discrete s)

lemma borel_eq_top_of_encodable [topological_space Œ±] [t1_space Œ±] [encodable Œ±] :
  borel Œ± = ‚ä§ :=
begin
  refine (top_le_iff.1 $ Œª s hs, bUnion_of_singleton s ‚ñ∏ _),
  apply is_measurable.bUnion s.countable_encodable,
  intros x hx,
  apply is_measurable.of_compl,
  apply generate_measurable.basic,
  exact is_closed_singleton
end

lemma borel_eq_generate_from_of_subbasis {s : set (set Œ±)}
  [t : topological_space Œ±] [second_countable_topology Œ±] (hs : t = generate_from s) :
  borel Œ± = generate_from s :=
le_antisymm
  (generate_from_le $ assume u (hu : t.is_open u),
    begin
      rw [hs] at hu,
      induction hu,
      case generate_open.basic : u hu
      { exact generate_measurable.basic u hu },
      case generate_open.univ
      { exact @is_measurable.univ Œ± (generate_from s) },
      case generate_open.inter : s‚ÇÅ s‚ÇÇ _ _ hs‚ÇÅ hs‚ÇÇ
      { exact @is_measurable.inter Œ± (generate_from s) _ _ hs‚ÇÅ hs‚ÇÇ },
      case generate_open.sUnion : f hf ih {
        rcases is_open_sUnion_countable f (by rwa hs) with ‚ü®v, hv, vf, vu‚ü©,
        rw ‚Üê vu,
        exact @is_measurable.sUnion Œ± (generate_from s) _ hv
          (Œª x xv, ih _ (vf xv)) }
    end)
  (generate_from_le $ assume u hu, generate_measurable.basic _ $
    show t.is_open u, by rw [hs]; exact generate_open.basic _ hu)

lemma is_pi_system_is_open [topological_space Œ±] : is_pi_system (is_open : set Œ± ‚Üí Prop) :=
Œª s t hs ht hst, is_open_inter hs ht

section order_topology

variable (Œ±)
variables [topological_space Œ±] [second_countable_topology Œ±] [linear_order Œ±] [order_topology Œ±]

lemma borel_eq_generate_Iio : borel Œ± = generate_from (range Iio) :=
begin
  refine le_antisymm _ (generate_from_le _),
  { rw borel_eq_generate_from_of_subbasis (@order_topology.topology_eq_generate_intervals Œ± _ _ _),
    letI : measurable_space Œ± := measurable_space.generate_from (range Iio),
    have H : ‚àÄ a : Œ±, is_measurable (Iio a) := Œª a, generate_measurable.basic _ ‚ü®_, rfl‚ü©,
    refine generate_from_le _, rintro _ ‚ü®a, rfl | rfl‚ü©; [skip, apply H],
    by_cases h : ‚àÉ a', ‚àÄ b, a < b ‚Üî a' ‚â§ b,
    { rcases h with ‚ü®a', ha'‚ü©,
      rw (_ : Ioi a = (Iio a')·∂ú), { exact (H _).compl },
      simp [set.ext_iff, ha'] },
    { rcases is_open_Union_countable
        (Œª a' : {a' : Œ± // a < a'}, {b | a'.1 < b})
        (Œª a', is_open_lt' _) with ‚ü®v, ‚ü®hv‚ü©, vu‚ü©,
      simp [set.ext_iff] at vu,
      have : Ioi a = ‚ãÉ x : v, (Iio x.1.1)·∂ú,
      { simp [set.ext_iff],
        refine Œª x, ‚ü®Œª ax, _, Œª ‚ü®a', ‚ü®h, av‚ü©, ax‚ü©, lt_of_lt_of_le h ax‚ü©,
        rcases (vu x).2 _ with ‚ü®a', h‚ÇÅ, h‚ÇÇ‚ü©,
        { exact ‚ü®a', h‚ÇÅ, le_of_lt h‚ÇÇ‚ü© },
        refine not_imp_comm.1 (Œª h, _) h,
        exact ‚ü®x, Œª b, ‚ü®Œª ab, le_of_not_lt (Œª h', h ‚ü®b, ab, h'‚ü©),
          lt_of_lt_of_le ax‚ü©‚ü© },
      rw this, resetI,
      apply is_measurable.Union,
      exact Œª _, (H _).compl } },
  { rw forall_range_iff,
    intro a,
    exact generate_measurable.basic _ is_open_Iio }
end

lemma borel_eq_generate_Ioi : borel Œ± = generate_from (range Ioi) :=
@borel_eq_generate_Iio (order_dual Œ±) _ (by apply_instance : second_countable_topology Œ±) _ _

end order_topology

lemma borel_comap {f : Œ± ‚Üí Œ≤} {t : topological_space Œ≤} :
  @borel Œ± (t.induced f) = (@borel Œ≤ t).comap f :=
comap_generate_from.symm

lemma continuous.borel_measurable [topological_space Œ±] [topological_space Œ≤]
  {f : Œ± ‚Üí Œ≤} (hf : continuous f) :
  @measurable Œ± Œ≤ (borel Œ±) (borel Œ≤) f :=
measurable.of_le_map $ generate_from_le $
  Œª s hs, generate_measurable.basic (f ‚Åª¬π' s) (hf s hs)

/-- A space with `measurable_space` and `topological_space` structures such that
all open sets are measurable. -/
class opens_measurable_space (Œ± : Type*) [topological_space Œ±] [h : measurable_space Œ±] : Prop :=
(borel_le : borel Œ± ‚â§ h)

/-- A space with `measurable_space` and `topological_space` structures such that
the `œÉ`-algebra of measurable sets is exactly the `œÉ`-algebra generated by open sets. -/
class borel_space (Œ± : Type*) [topological_space Œ±] [measurable_space Œ±] : Prop :=
(measurable_eq : ‚Äπmeasurable_space Œ±‚Ä∫ = borel Œ±)

/-- In a `borel_space` all open sets are measurable. -/
@[priority 100]
instance borel_space.opens_measurable {Œ± : Type*} [topological_space Œ±] [measurable_space Œ±]
  [borel_space Œ±] : opens_measurable_space Œ± :=
‚ü®ge_of_eq $ borel_space.measurable_eq‚ü©

instance subtype.borel_space {Œ± : Type*} [topological_space Œ±] [measurable_space Œ±]
  [hŒ± : borel_space Œ±] (s : set Œ±) :
  borel_space s :=
‚ü®by { rw [hŒ±.1, subtype.measurable_space, ‚Üê borel_comap], refl }‚ü©

instance subtype.opens_measurable_space {Œ± : Type*} [topological_space Œ±] [measurable_space Œ±]
  [h : opens_measurable_space Œ±] (s : set Œ±) :
  opens_measurable_space s :=
‚ü®by { rw [borel_comap], exact comap_mono h.1 }‚ü©

section
variables [topological_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±]
   [topological_space Œ≤] [measurable_space Œ≤] [opens_measurable_space Œ≤]
   [topological_space Œ≥] [measurable_space Œ≥] [borel_space Œ≥]
   [measurable_space Œ¥]

lemma is_open.is_measurable (h : is_open s) : is_measurable s :=
opens_measurable_space.borel_le _ $ generate_measurable.basic _ h

lemma is_measurable_interior : is_measurable (interior s) := is_open_interior.is_measurable

lemma is_closed.is_measurable (h : is_closed s) : is_measurable s :=
h.is_measurable.of_compl

lemma is_compact.is_measurable [t2_space Œ±] (h : is_compact s) : is_measurable s :=
h.is_closed.is_measurable

lemma is_measurable_closure : is_measurable (closure s) :=
is_closed_closure.is_measurable

lemma measurable_of_is_open {f : Œ¥ ‚Üí Œ≥} (hf : ‚àÄ s, is_open s ‚Üí is_measurable (f ‚Åª¬π' s)) :
  measurable f :=
by { rw [‚Äπborel_space Œ≥‚Ä∫.measurable_eq], exact measurable_generate_from hf }

lemma measurable_of_is_closed {f : Œ¥ ‚Üí Œ≥} (hf : ‚àÄ s, is_closed s ‚Üí is_measurable (f ‚Åª¬π' s)) :
  measurable f :=
begin
  apply measurable_of_is_open, intros s hs,
  rw [‚Üê is_measurable.compl_iff, ‚Üê preimage_compl], apply hf, rw [is_closed_compl_iff], exact hs
end

lemma measurable_of_is_closed' {f : Œ¥ ‚Üí Œ≥}
  (hf : ‚àÄ s, is_closed s ‚Üí s.nonempty ‚Üí s ‚â† univ ‚Üí is_measurable (f ‚Åª¬π' s)) : measurable f :=
begin
  apply measurable_of_is_closed, intros s hs,
  cases eq_empty_or_nonempty s with h1 h1, { simp [h1] },
  by_cases h2 : s = univ, { simp [h2] },
  exact hf s hs h1 h2
end

instance nhds_is_measurably_generated (a : Œ±) : (ùìù a).is_measurably_generated :=
begin
  rw [nhds, infi_subtype'],
  refine @filter.infi_is_measurably_generated _ _ _ _ (Œª i, _),
  exact i.2.2.is_measurable.principal_is_measurably_generated
end

/-- If `s` is a measurable set, then `ùìù[s] a` is a measurably generated filter for
each `a`. This cannot be an `instance` because it depends on a non-instance `hs : is_measurable s`.
-/
lemma is_measurable.nhds_within_is_measurably_generated {s : set Œ±} (hs : is_measurable s) (a : Œ±) :
  (ùìù[s] a).is_measurably_generated :=
by haveI := hs.principal_is_measurably_generated; exact filter.inf_is_measurably_generated _ _

@[priority 100] -- see Note [lower instance priority]
instance opens_measurable_space.to_measurable_singleton_class [t1_space Œ±] :
  measurable_singleton_class Œ± :=
‚ü®Œª x, is_closed_singleton.is_measurable‚ü©

instance prod.opens_measurable_space [second_countable_topology Œ±] [second_countable_topology Œ≤] :
  opens_measurable_space (Œ± √ó Œ≤) :=
begin
  refine ‚ü®_‚ü©,
  rcases is_open_generated_countable_inter Œ± with ‚ü®a, ha‚ÇÅ, ha‚ÇÇ, ha‚ÇÉ, ha‚ÇÑ, ha‚ÇÖ‚ü©,
  rcases is_open_generated_countable_inter Œ≤ with ‚ü®b, hb‚ÇÅ, hb‚ÇÇ, hb‚ÇÉ, hb‚ÇÑ, hb‚ÇÖ‚ü©,
  have : prod.topological_space = generate_from {g | ‚àÉu‚ààa, ‚àÉv‚ààb, g = set.prod u v},
  { rw [ha‚ÇÖ, hb‚ÇÖ], exact prod_generate_from_generate_from_eq ha‚ÇÑ hb‚ÇÑ },
  rw [borel_eq_generate_from_of_subbasis this],
  apply generate_from_le,
  rintros _ ‚ü®u, hu, v, hv, rfl‚ü©,
  have hu : is_open u, by { rw [ha‚ÇÖ], exact generate_open.basic _ hu },
  have hv : is_open v, by { rw [hb‚ÇÖ], exact generate_open.basic _ hv },
  exact hu.is_measurable.prod hv.is_measurable
end

section preorder
variables [preorder Œ±] [order_closed_topology Œ±] {a b : Œ±}

lemma is_measurable_Ici : is_measurable (Ici a) := is_closed_Ici.is_measurable
lemma is_measurable_Iic : is_measurable (Iic a) := is_closed_Iic.is_measurable
lemma is_measurable_Icc : is_measurable (Icc a b) := is_closed_Icc.is_measurable

instance nhds_within_Ici_is_measurably_generated :
  (ùìù[Ici b] a).is_measurably_generated :=
is_measurable_Ici.nhds_within_is_measurably_generated _

instance nhds_within_Iic_is_measurably_generated :
  (ùìù[Iic b] a).is_measurably_generated :=
is_measurable_Iic.nhds_within_is_measurably_generated _

instance at_top_is_measurably_generated : (filter.at_top : filter Œ±).is_measurably_generated :=
@filter.infi_is_measurably_generated _ _ _ _ $
  Œª a, (is_measurable_Ici : is_measurable (Ici a)).principal_is_measurably_generated

instance at_bot_is_measurably_generated : (filter.at_bot : filter Œ±).is_measurably_generated :=
@filter.infi_is_measurably_generated _ _ _ _ $
  Œª a, (is_measurable_Iic : is_measurable (Iic a)).principal_is_measurably_generated

end preorder

section partial_order
variables [partial_order Œ±] [order_closed_topology Œ±] [second_countable_topology Œ±]
  {a b : Œ±}

lemma is_measurable_le' : is_measurable {p : Œ± √ó Œ± | p.1 ‚â§ p.2} :=
order_closed_topology.is_closed_le'.is_measurable

lemma is_measurable_le {f g : Œ¥ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  is_measurable {a | f a ‚â§ g a} :=
hf.prod_mk hg is_measurable_le'

end partial_order

section linear_order
variables [linear_order Œ±] [order_closed_topology Œ±] {a b : Œ±}

lemma is_measurable_Iio : is_measurable (Iio a) := is_open_Iio.is_measurable
lemma is_measurable_Ioi : is_measurable (Ioi a) := is_open_Ioi.is_measurable
lemma is_measurable_Ioo : is_measurable (Ioo a b) := is_open_Ioo.is_measurable
lemma is_measurable_Ioc : is_measurable (Ioc a b) := is_measurable_Ioi.inter is_measurable_Iic
lemma is_measurable_Ico : is_measurable (Ico a b) := is_measurable_Ici.inter is_measurable_Iio

instance nhds_within_Ioi_is_measurably_generated :
  (ùìù[Ioi b] a).is_measurably_generated :=
is_measurable_Ioi.nhds_within_is_measurably_generated _

instance nhds_within_Iio_is_measurably_generated :
  (ùìù[Iio b] a).is_measurably_generated :=
is_measurable_Iio.nhds_within_is_measurably_generated _

variables [second_countable_topology Œ±]

lemma is_measurable_lt' : is_measurable {p : Œ± √ó Œ± | p.1 < p.2} :=
(is_open_lt continuous_fst continuous_snd).is_measurable

lemma is_measurable_lt {f g : Œ¥ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  is_measurable {a | f a < g a} :=
hf.prod_mk hg is_measurable_lt'

end linear_order

section decidable_linear_order

variables [decidable_linear_order Œ±] [order_closed_topology Œ±]

lemma is_measurable_interval {a b : Œ±} : is_measurable (interval a b) :=
is_measurable_Icc

variables [second_countable_topology Œ±]

lemma measurable.max {f g : Œ¥ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  measurable (Œª a, max (f a) (g a)) :=
hf.piecewise (is_measurable_le hg hf) hg

lemma measurable.min {f g : Œ¥ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  measurable (Œª a, min (f a) (g a)) :=
hf.piecewise (is_measurable_le hf hg) hg

end decidable_linear_order

/-- A continuous function from an `opens_measurable_space` to a `borel_space`
is measurable. -/
lemma continuous.measurable {f : Œ± ‚Üí Œ≥} (hf : continuous f) :
  measurable f :=
hf.borel_measurable.mono opens_measurable_space.borel_le
  (le_of_eq $ borel_space.measurable_eq)

/-- A homeomorphism between two Borel spaces is a measurable equivalence.-/
def homeomorph.to_measurable_equiv {Œ± : Type*} {Œ≤ : Type*} [topological_space Œ±]
  [measurable_space Œ±] [borel_space Œ±] [topological_space Œ≤] [measurable_space Œ≤]
  [borel_space Œ≤] (h : Œ± ‚âÉ‚Çú Œ≤) :
  measurable_equiv Œ± Œ≤ :=
{ measurable_to_fun := h.continuous_to_fun.measurable,
  measurable_inv_fun := h.continuous_inv_fun.measurable,
  .. h }

lemma measurable_of_continuous_on_compl_singleton [t1_space Œ±] {f : Œ± ‚Üí Œ≥} (a : Œ±)
  (hf : continuous_on f {x | x ‚â† a}) :
  measurable f :=
measurable_of_measurable_on_compl_singleton a
  (continuous_on_iff_continuous_restrict.1 hf).measurable

lemma continuous.measurable2 [second_countable_topology Œ±] [second_countable_topology Œ≤]
  {f : Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ≤} {c : Œ± ‚Üí Œ≤ ‚Üí Œ≥}
  (h : continuous (Œª p : Œ± √ó Œ≤, c p.1 p.2)) (hf : measurable f) (hg : measurable g) :
  measurable (Œª a, c (f a) (g a)) :=
h.measurable.comp (hf.prod_mk hg)

lemma measurable.smul [semiring Œ±] [second_countable_topology Œ±]
  [add_comm_monoid Œ≥] [second_countable_topology Œ≥]
  [semimodule Œ± Œ≥] [topological_semimodule Œ± Œ≥]
  {f : Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ≥} (hf : measurable f) (hg : measurable g) :
  measurable (Œª c, f c ‚Ä¢ g c) :=
continuous_smul.measurable2 hf hg

lemma measurable.const_smul {R M : Type*} [topological_space R] [semiring R]
  [add_comm_monoid M] [semimodule R M] [topological_space M] [topological_semimodule R M]
  [measurable_space M] [borel_space M]
  {f : Œ¥ ‚Üí M} (hf : measurable f) (c : R) :
  measurable (Œª x, c ‚Ä¢ f x) :=
(continuous_const.smul continuous_id).measurable.comp hf

lemma measurable_const_smul_iff {Œ± : Type*} [topological_space Œ±]
  [division_ring Œ±] [add_comm_monoid Œ≥]
  [semimodule Œ± Œ≥] [topological_semimodule Œ± Œ≥]
  {f : Œ¥ ‚Üí Œ≥} {c : Œ±} (hc : c ‚â† 0) :
  measurable (Œª x, c ‚Ä¢ f x) ‚Üî measurable f :=
‚ü®Œª h, by simpa only [smul_smul, inv_mul_cancel hc, one_smul] using h.const_smul c‚Åª¬π,
  Œª h, h.const_smul c‚ü©

lemma measurable.const_mul {R : Type*} [topological_space R] [measurable_space R]
  [borel_space R] [semiring R] [topological_semiring R]
  {f : Œ¥ ‚Üí R} (hf : measurable f) (c : R) :
  measurable (Œª x, c * f x) :=
hf.const_smul c

lemma measurable.mul_const {R : Type*} [topological_space R] [measurable_space R]
  [borel_space R] [semiring R] [topological_semiring R]
  {f : Œ¥ ‚Üí R} (hf : measurable f) (c : R) :
  measurable (Œª x, f x * c) :=
(continuous_id.mul continuous_const).measurable.comp hf

end

section borel_space
variables [topological_space Œ±] [measurable_space Œ±] [borel_space Œ±]
  [topological_space Œ≤] [measurable_space Œ≤] [borel_space Œ≤]
  [topological_space Œ≥] [measurable_space Œ≥] [borel_space Œ≥]
  [measurable_space Œ¥]

lemma prod_le_borel_prod : prod.measurable_space ‚â§ borel (Œ± √ó Œ≤) :=
begin
  rw [‚Äπborel_space Œ±‚Ä∫.measurable_eq, ‚Äπborel_space Œ≤‚Ä∫.measurable_eq],
  refine sup_le _ _,
  { exact comap_le_iff_le_map.mpr continuous_fst.borel_measurable },
  { exact comap_le_iff_le_map.mpr continuous_snd.borel_measurable }
end

instance prod.borel_space [second_countable_topology Œ±] [second_countable_topology Œ≤] :
  borel_space (Œ± √ó Œ≤) :=
‚ü®le_antisymm prod_le_borel_prod opens_measurable_space.borel_le‚ü©

@[to_additive]
lemma measurable_mul [has_mul Œ±] [has_continuous_mul Œ±] [second_countable_topology Œ±] :
  measurable (Œª p : Œ± √ó Œ±, p.1 * p.2) :=
continuous_mul.measurable

@[to_additive]
lemma measurable.mul [has_mul Œ±] [has_continuous_mul Œ±] [second_countable_topology Œ±]
  {f : Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} : measurable f ‚Üí measurable g ‚Üí measurable (Œª a, f a * g a) :=
continuous_mul.measurable2

/-- A variant of `measurable.mul` that uses `*` on functions -/
@[to_additive]
lemma measurable.mul' [has_mul Œ±] [has_continuous_mul Œ±] [second_countable_topology Œ±]
  {f : Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} : measurable f ‚Üí measurable g ‚Üí measurable (f * g) :=
measurable.mul

@[to_additive]
lemma measurable_mul_left [has_mul Œ±] [has_continuous_mul Œ±] (x : Œ±) :
  measurable (Œª y : Œ±, x * y) :=
continuous.measurable $ continuous_const.mul continuous_id

@[to_additive]
lemma measurable_mul_right [has_mul Œ±] [has_continuous_mul Œ±] (x : Œ±) :
  measurable (Œª y : Œ±, y * x) :=
continuous.measurable $ continuous_id.mul continuous_const

@[to_additive]
lemma finset.measurable_prod {Œπ : Type*} [comm_monoid Œ±] [has_continuous_mul Œ±]
  [second_countable_topology Œ±] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (s : finset Œπ) (hf : ‚àÄi, measurable (f i)) :
  measurable (Œª a, ‚àè i in s, f i a) :=
finset.induction_on s
  (by simp only [finset.prod_empty, measurable_const])
  (assume i s his ih, by simpa [his] using (hf i).mul ih)

@[to_additive]
lemma measurable_inv [group Œ±] [topological_group Œ±] : measurable (has_inv.inv : Œ± ‚Üí Œ±) :=
continuous_inv.measurable

@[to_additive]
lemma measurable.inv [group Œ±] [topological_group Œ±] {f : Œ¥ ‚Üí Œ±} (hf : measurable f) :
  measurable (Œª a, (f a)‚Åª¬π) :=
measurable_inv.comp hf

lemma measurable_inv' {Œ± : Type*} [normed_field Œ±] [measurable_space Œ±] [borel_space Œ±] :
  measurable (has_inv.inv : Œ± ‚Üí Œ±) :=
measurable_of_continuous_on_compl_singleton 0 normed_field.continuous_on_inv

lemma measurable.inv' {Œ± : Type*} [normed_field Œ±] [measurable_space Œ±] [borel_space Œ±]
  {f : Œ¥ ‚Üí Œ±} (hf : measurable f) :
  measurable (Œª a, (f a)‚Åª¬π) :=
measurable_inv'.comp hf

@[to_additive]
lemma measurable.of_inv [group Œ±] [topological_group Œ±] {f : Œ¥ ‚Üí Œ±}
  (hf : measurable (Œª a, (f a)‚Åª¬π)) : measurable f :=
by simpa only [inv_inv] using hf.inv

@[simp, to_additive]
lemma measurable_inv_iff [group Œ±] [topological_group Œ±] {f : Œ¥ ‚Üí Œ±} :
  measurable (Œª a, (f a)‚Åª¬π) ‚Üî measurable f :=
‚ü®measurable.of_inv, measurable.inv‚ü©

lemma measurable.sub [add_group Œ±] [topological_add_group Œ±] [second_countable_topology Œ±]
  {f g : Œ¥ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  measurable (Œª x, f x - g x) :=
hf.add hg.neg

lemma measurable_comp_iff_of_closed_embedding {f : Œ¥ ‚Üí Œ≤} (g : Œ≤ ‚Üí Œ≥) (hg : closed_embedding g) :
  measurable (g ‚àò f) ‚Üî measurable f :=
begin
  refine ‚ü®Œª hf, _, Œª hf, hg.continuous.measurable.comp hf‚ü©,
  apply measurable_of_is_closed, intros s hs,
  convert hf (hg.is_closed_map s hs).is_measurable,
  rw [@preimage_comp _ _ _ f g, preimage_image_eq _ hg.to_embedding.inj]
end

section linear_order

variables [linear_order Œ±] [order_topology Œ±] [second_countable_topology Œ±]

lemma measurable_of_Iio {f : Œ¥ ‚Üí Œ±} (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Iio x)) : measurable f :=
begin
  convert measurable_generate_from _,
  exact borel_space.measurable_eq.trans (borel_eq_generate_Iio _),
  rintro _ ‚ü®x, rfl‚ü©, exact hf x
end

lemma measurable_of_Ioi {f : Œ¥ ‚Üí Œ±} (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Ioi x)) : measurable f :=
begin
  convert measurable_generate_from _,
  exact borel_space.measurable_eq.trans (borel_eq_generate_Ioi _),
  rintro _ ‚ü®x, rfl‚ü©, exact hf x
end

lemma measurable_of_Iic {f : Œ¥ ‚Üí Œ±} (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Iic x)) : measurable f :=
begin
  apply measurable_of_Ioi,
  simp_rw [‚Üê compl_Iic, preimage_compl, is_measurable.compl_iff],
  assumption
end

lemma measurable_of_Ici {f : Œ¥ ‚Üí Œ±} (hf : ‚àÄ x, is_measurable (f ‚Åª¬π' Ici x)) : measurable f :=
begin
  apply measurable_of_Iio,
  simp_rw [‚Üê compl_Ici, preimage_compl, is_measurable.compl_iff],
  assumption
end

lemma measurable.is_lub {Œπ} [encodable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i))
  (hg : ‚àÄ b, is_lub {a | ‚àÉ i, f i b = a} (g b)) :
  measurable g :=
begin
  change ‚àÄ b, is_lub (range $ Œª i, f i b) (g b) at hg,
  rw [‚Äπborel_space Œ±‚Ä∫.measurable_eq, borel_eq_generate_Ioi Œ±],
  apply measurable_generate_from,
  rintro _ ‚ü®a, rfl‚ü©,
  simp only [set.preimage, mem_Ioi, lt_is_lub_iff (hg _), exists_range_iff, set_of_exists],
  exact is_measurable.Union (Œª i, hf i (is_open_lt' _).is_measurable)
end

lemma measurable.is_glb {Œπ} [encodable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {g : Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i))
  (hg : ‚àÄ b, is_glb {a | ‚àÉ i, f i b = a} (g b)) :
  measurable g :=
begin
  change ‚àÄ b, is_glb (range $ Œª i, f i b) (g b) at hg,
  rw [‚Äπborel_space Œ±‚Ä∫.measurable_eq, borel_eq_generate_Iio Œ±],
  apply measurable_generate_from,
  rintro _ ‚ü®a, rfl‚ü©,
  simp only [set.preimage, mem_Iio, is_glb_lt_iff (hg _), exists_range_iff, set_of_exists],
  exact is_measurable.Union (Œª i, hf i (is_open_gt' _).is_measurable)
end

end linear_order

lemma measurable.supr_Prop {Œ±} [measurable_space Œ±] [complete_lattice Œ±]
  (p : Prop) {f : Œ¥ ‚Üí Œ±} (hf : measurable f) :
  measurable (Œª b, ‚®Ü h : p, f b) :=
classical.by_cases
  (assume h : p, begin convert hf, funext, exact supr_pos h end)
  (assume h : ¬¨p, begin convert measurable_const, funext, exact supr_neg h end)

lemma measurable.infi_Prop {Œ±} [measurable_space Œ±] [complete_lattice Œ±]
  (p : Prop) {f : Œ¥ ‚Üí Œ±} (hf : measurable f) :
  measurable (Œª b, ‚®Ö h : p, f b) :=
classical.by_cases
  (assume h : p, begin convert hf, funext, exact infi_pos h end )
  (assume h : ¬¨p, begin convert measurable_const, funext, exact infi_neg h end)

section complete_linear_order

variables [complete_linear_order Œ±] [order_topology Œ±] [second_countable_topology Œ±]

lemma measurable_supr {Œπ} [encodable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª b, ‚®Ü i, f i b) :=
measurable.is_lub hf $ Œª b, is_lub_supr

lemma measurable_infi {Œπ} [encodable Œπ] {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª b, ‚®Ö i, f i b) :=
measurable.is_glb hf $ Œª b, is_glb_infi

lemma measurable_bsupr {Œπ} (s : set Œπ) {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (hs : countable s)
  (hf : ‚àÄ i, measurable (f i)) : measurable (Œª b, ‚®Ü i ‚àà s, f i b) :=
by { haveI : encodable s := hs.to_encodable, simp only [supr_subtype'],
     exact measurable_supr (Œª i, hf i) }

lemma measurable_binfi {Œπ} (s : set Œπ) {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} (hs : countable s)
  (hf : ‚àÄ i, measurable (f i)) : measurable (Œª b, ‚®Ö i ‚àà s, f i b) :=
by { haveI : encodable s := hs.to_encodable, simp only [infi_subtype'],
     exact measurable_infi (Œª i, hf i) }

/-- `liminf` over a general filter is measurable. See `measurable_liminf` for the version over `‚Ñï`.
-/
lemma measurable_liminf' {Œπ Œπ'} {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {u : filter Œπ} (hf : ‚àÄ i, measurable (f i))
  {p : Œπ' ‚Üí Prop} {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) :
  measurable (Œª x, liminf u (Œª i, f i x)) :=
begin
  simp_rw [hu.to_has_basis.liminf_eq_supr_infi],
  refine measurable_bsupr _ hu.countable _,
  exact Œª i, measurable_binfi _ (hs i) hf
end

/-- `limsup` over a general filter is measurable. See `measurable_limsup` for the version over `‚Ñï`.
-/
lemma measurable_limsup' {Œπ Œπ'}  {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {u : filter Œπ} (hf : ‚àÄ i, measurable (f i))
  {p : Œπ' ‚Üí Prop} {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) :
  measurable (Œª x, limsup u (Œª i, f i x)) :=
begin
  simp_rw [hu.to_has_basis.limsup_eq_infi_supr],
  refine measurable_binfi _ hu.countable _,
  exact Œª i, measurable_bsupr _ (hs i) hf
end

/-- `liminf` over `‚Ñï` is measurable. See `measurable_liminf'` for a version with a general filter.
-/
lemma measurable_liminf {f : ‚Ñï ‚Üí Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª x, liminf at_top (Œª i, f i x)) :=
measurable_liminf' hf at_top_countable_basis (Œª i, countable_encodable _)

/-- `limsup` over `‚Ñï` is measurable. See `measurable_limsup'` for a version with a general filter.
-/
lemma measurable_limsup {f : ‚Ñï ‚Üí Œ¥ ‚Üí Œ±} (hf : ‚àÄ i, measurable (f i)) :
  measurable (Œª x, limsup at_top (Œª i, f i x)) :=
measurable_limsup' hf at_top_countable_basis (Œª i, countable_encodable _)


end complete_linear_order

section conditionally_complete_linear_order

variables [conditionally_complete_linear_order Œ±] [second_countable_topology Œ±] [order_topology Œ±]

lemma measurable_cSup {Œπ} {f : Œπ ‚Üí Œ¥ ‚Üí Œ±} {s : set Œπ} (hs : s.countable)
  (hf : ‚àÄ i, measurable (f i)) (bdd : ‚àÄ x, bdd_above ((Œª i, f i x) '' s)) :
  measurable (Œª x, Sup ((Œª i, f i x) '' s)) :=
begin
  cases eq_empty_or_nonempty s with h2s h2s,
  { simp [h2s, measurable_const] },
  { apply measurable_of_Iic, intro y,
    simp_rw [preimage, mem_Iic, cSup_le_iff (bdd _) (h2s.image _), ball_image_iff, set_of_forall],
    exact is_measurable.bInter hs (Œª i hi, is_measurable_le (hf i) measurable_const) }
end

end conditionally_complete_linear_order

/-- Convert a `homeomorph` to a `measurable_equiv`. -/
def homemorph.to_measurable_equiv (h : Œ± ‚âÉ‚Çú Œ≤) :
  measurable_equiv Œ± Œ≤ :=
{ to_equiv := h.to_equiv,
  measurable_to_fun := h.continuous_to_fun.measurable,
  measurable_inv_fun := h.continuous_inv_fun.measurable }

end borel_space

instance empty.borel_space : borel_space empty := ‚ü®borel_eq_top_of_discrete.symm‚ü©
instance unit.borel_space : borel_space unit := ‚ü®borel_eq_top_of_discrete.symm‚ü©
instance bool.borel_space : borel_space bool := ‚ü®borel_eq_top_of_discrete.symm‚ü©
instance nat.borel_space : borel_space ‚Ñï := ‚ü®borel_eq_top_of_discrete.symm‚ü©
instance int.borel_space : borel_space ‚Ñ§ := ‚ü®borel_eq_top_of_discrete.symm‚ü©
instance rat.borel_space : borel_space ‚Ñö := ‚ü®borel_eq_top_of_encodable.symm‚ü©

instance real.measurable_space : measurable_space ‚Ñù := borel ‚Ñù
instance real.borel_space : borel_space ‚Ñù := ‚ü®rfl‚ü©

instance nnreal.measurable_space : measurable_space ‚Ñù‚â•0 := borel ‚Ñù‚â•0
instance nnreal.borel_space : borel_space ‚Ñù‚â•0 := ‚ü®rfl‚ü©

instance ennreal.measurable_space : measurable_space ennreal := borel ennreal
instance ennreal.borel_space : borel_space ennreal := ‚ü®rfl‚ü©

instance complex.measurable_space : measurable_space ‚ÑÇ := borel ‚ÑÇ
instance complex.borel_space : borel_space ‚ÑÇ := ‚ü®rfl‚ü©

section metric_space

variables [metric_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±]
variables [measurable_space Œ≤] {x : Œ±} {Œµ : ‚Ñù}

open metric

lemma is_measurable_ball : is_measurable (metric.ball x Œµ) :=
metric.is_open_ball.is_measurable

lemma is_measurable_closed_ball : is_measurable (metric.closed_ball x Œµ) :=
metric.is_closed_ball.is_measurable

lemma measurable_inf_dist {s : set Œ±} : measurable (Œª x, inf_dist x s) :=
(continuous_inf_dist_pt s).measurable

lemma measurable.inf_dist {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} :
  measurable (Œª x, inf_dist (f x) s) :=
measurable_inf_dist.comp hf

lemma measurable_inf_nndist {s : set Œ±} : measurable (Œª x, inf_nndist x s) :=
(continuous_inf_nndist_pt s).measurable

lemma measurable.inf_nndist {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} :
  measurable (Œª x, inf_nndist (f x) s) :=
measurable_inf_nndist.comp hf

variables [second_countable_topology Œ±]
lemma measurable_dist : measurable (Œª p : Œ± √ó Œ±, dist p.1 p.2) :=
continuous_dist.measurable

lemma measurable.dist {f g : Œ≤ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  measurable (Œª b, dist (f b) (g b)) :=
continuous_dist.measurable2 hf hg

lemma measurable_nndist : measurable (Œª p : Œ± √ó Œ±, nndist p.1 p.2) :=
continuous_nndist.measurable

lemma measurable.nndist {f g : Œ≤ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  measurable (Œª b, nndist (f b) (g b)) :=
continuous_nndist.measurable2 hf hg

end metric_space

section emetric_space

variables [emetric_space Œ±] [measurable_space Œ±] [opens_measurable_space Œ±]
variables [measurable_space Œ≤] {x : Œ±} {Œµ : ennreal}

open emetric

lemma is_measurable_eball : is_measurable (emetric.ball x Œµ) :=
emetric.is_open_ball.is_measurable

lemma measurable_edist_right : measurable (edist x) :=
(continuous_const.edist continuous_id).measurable

lemma measurable_edist_left : measurable (Œª y, edist y x) :=
(continuous_id.edist continuous_const).measurable

lemma measurable_inf_edist {s : set Œ±} : measurable (Œª x, inf_edist x s) :=
continuous_inf_edist.measurable

lemma measurable.inf_edist {f : Œ≤ ‚Üí Œ±} (hf : measurable f) {s : set Œ±} :
  measurable (Œª x, inf_edist (f x) s) :=
measurable_inf_edist.comp hf

variables [second_countable_topology Œ±]

lemma measurable_edist : measurable (Œª p : Œ± √ó Œ±, edist p.1 p.2) :=
continuous_edist.measurable

lemma measurable.edist {f g : Œ≤ ‚Üí Œ±} (hf : measurable f) (hg : measurable g) :
  measurable (Œª b, edist (f b) (g b)) :=
continuous_edist.measurable2 hf hg

end emetric_space

namespace real
open measurable_space measure_theory

lemma borel_eq_generate_from_Ioo_rat :
  borel ‚Ñù = generate_from (‚ãÉ(a b : ‚Ñö) (h : a < b), {Ioo a b}) :=
borel_eq_generate_from_of_subbasis is_topological_basis_Ioo_rat.2.2

lemma measure_ext_Ioo_rat {Œº ŒΩ : measure ‚Ñù} [locally_finite_measure Œº]
  (h : ‚àÄ a b : ‚Ñö, Œº (Ioo a b) = ŒΩ (Ioo a b)) : Œº = ŒΩ :=
begin
  refine measure.ext_of_generate_from_of_cover_subset borel_eq_generate_from_Ioo_rat _
    (subset.refl _) _ _ _ _,
  { simp only [is_pi_system, mem_Union, mem_singleton_iff],
    rintros _ _ ‚ü®a‚ÇÅ, b‚ÇÅ, h‚ÇÅ, rfl‚ü© ‚ü®a‚ÇÇ, b‚ÇÇ, h‚ÇÇ, rfl‚ü© ne,
    simp only [Ioo_inter_Ioo, sup_eq_max, inf_eq_min, ‚Üê rat.cast_max, ‚Üê rat.cast_min,
      nonempty_Ioo] at ne ‚ä¢,
    refine ‚ü®_, _, _, rfl‚ü©,
    assumption_mod_cast },
  { exact countable_Union (Œª a, (countable_encodable _).bUnion $ Œª _ _, countable_singleton _) },
  { exact is_topological_basis_Ioo_rat.2.1 },
  { simp only [mem_Union, mem_singleton_iff],
    rintros _ ‚ü®a, b, h, rfl‚ü©,
    refine (measure_mono subset_closure).trans_lt _,
    rw [closure_Ioo],
    exacts [compact_Icc.finite_measure, rat.cast_lt.2 h] },
  { simp only [mem_Union, mem_singleton_iff],
    rintros _ ‚ü®a, b, hab, rfl‚ü©,
    exact h a b }
end

lemma borel_eq_generate_from_Iio_rat :
  borel ‚Ñù = generate_from (‚ãÉ a : ‚Ñö, {Iio a}) :=
begin
  let g, swap,
  apply le_antisymm (_ : _ ‚â§ g) (measurable_space.generate_from_le (Œª t, _)),
  { rw borel_eq_generate_from_Ioo_rat,
    refine generate_from_le (Œª t, _),
    simp only [mem_Union], rintro ‚ü®a, b, h, H‚ü©,
    rw [mem_singleton_iff.1 H],
    rw (set.ext (Œª x, _) : Ioo (a : ‚Ñù) b = (‚ãÉc>a, (Iio c)·∂ú) ‚à© Iio b),
    { have hg : ‚àÄ q : ‚Ñö, g.is_measurable' (Iio q) :=
        Œª q, generate_measurable.basic (Iio q) (by { simp, exact ‚ü®_, rfl‚ü© }),
      refine @is_measurable.inter _ g _ _ _ (hg _),
      refine @is_measurable.bUnion _ _ g _ _ (countable_encodable _) (Œª c h, _),
      exact @is_measurable.compl _ _ g (hg _) },
    { simp [Ioo, Iio],
      refine and_congr _ iff.rfl,
      exact ‚ü®Œª h,
        let ‚ü®c, ac, cx‚ü© := exists_rat_btwn h in
        ‚ü®c, rat.cast_lt.1 ac, le_of_lt cx‚ü©,
       Œª ‚ü®c, ac, cx‚ü©, lt_of_lt_of_le (rat.cast_lt.2 ac) cx‚ü© } },
  { simp, rintro r rfl, exact is_open_Iio.is_measurable }
end

end real

variable [measurable_space Œ±]

lemma measurable.sub_nnreal {f g : Œ± ‚Üí ‚Ñù‚â•0} :
  measurable f ‚Üí measurable g ‚Üí measurable (Œª a, f a - g a) :=
continuous_sub.measurable2

lemma measurable.nnreal_of_real {f : Œ± ‚Üí ‚Ñù} (hf : measurable f) :
  measurable (Œª x, nnreal.of_real (f x)) :=
nnreal.continuous_of_real.measurable.comp hf

lemma nnreal.measurable_coe : measurable (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù) :=
nnreal.continuous_coe.measurable

lemma measurable.nnreal_coe {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : measurable f) :
  measurable (Œª x, (f x : ‚Ñù)) :=
nnreal.measurable_coe.comp hf

lemma measurable.ennreal_coe {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : measurable f) :
  measurable (Œª x, (f x : ennreal)) :=
ennreal.continuous_coe.measurable.comp hf

lemma measurable.ennreal_of_real {f : Œ± ‚Üí ‚Ñù} (hf : measurable f) :
  measurable (Œª x, ennreal.of_real (f x)) :=
ennreal.continuous_of_real.measurable.comp hf

/-- The set of finite `ennreal` numbers is `measurable_equiv` to `‚Ñù‚â•0`. -/
def measurable_equiv.ennreal_equiv_nnreal : measurable_equiv {r : ennreal | r ‚â† ‚ä§} ‚Ñù‚â•0 :=
ennreal.ne_top_homeomorph_nnreal.to_measurable_equiv

namespace ennreal

lemma measurable_coe : measurable (coe : ‚Ñù‚â•0 ‚Üí ennreal) :=
measurable_id.ennreal_coe

lemma measurable_of_measurable_nnreal {f : ennreal ‚Üí Œ±}
  (h : measurable (Œª p : ‚Ñù‚â•0, f p)) : measurable f :=
measurable_of_measurable_on_compl_singleton ‚ä§
  (measurable_equiv.ennreal_equiv_nnreal.symm.measurable_coe_iff.1 h)

/-- `ennreal` is `measurable_equiv` to `‚Ñù‚â•0 ‚äï unit`. -/
def ennreal_equiv_sum :
  measurable_equiv ennreal (‚Ñù‚â•0 ‚äï unit) :=
{ measurable_to_fun  := measurable_of_measurable_nnreal measurable_inl,
  measurable_inv_fun := measurable_sum measurable_coe (@measurable_const ennreal unit _ _ ‚ä§),
  .. equiv.option_equiv_sum_punit ‚Ñù‚â•0 }

open function (uncurry)

lemma measurable_of_measurable_nnreal_prod [measurable_space Œ≤] [measurable_space Œ≥]
  {f : ennreal √ó Œ≤ ‚Üí Œ≥} (H‚ÇÅ : measurable (Œª p : ‚Ñù‚â•0 √ó Œ≤, f (p.1, p.2)))
  (H‚ÇÇ : measurable (Œª x, f (‚ä§, x))) :
  measurable f :=
let e : measurable_equiv (ennreal √ó Œ≤) (‚Ñù‚â•0 √ó Œ≤ ‚äï unit √ó Œ≤) :=
  (ennreal_equiv_sum.prod_congr (measurable_equiv.refl Œ≤)).trans
    (measurable_equiv.sum_prod_distrib _ _ _) in
e.symm.measurable_coe_iff.1 $ measurable_sum H‚ÇÅ (H‚ÇÇ.comp measurable_id.snd)

lemma measurable_of_measurable_nnreal_nnreal [measurable_space Œ≤]
  {f : ennreal √ó ennreal ‚Üí Œ≤} (h‚ÇÅ : measurable (Œª p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0, f (p.1, p.2)))
  (h‚ÇÇ : measurable (Œª r : ‚Ñù‚â•0, f (‚ä§, r))) (h‚ÇÉ : measurable (Œª r : ‚Ñù‚â•0, f (r, ‚ä§))) :
  measurable f :=
measurable_of_measurable_nnreal_prod
  (measurable_swap_iff.1 $ measurable_of_measurable_nnreal_prod (h‚ÇÅ.comp measurable_swap) h‚ÇÉ)
  (measurable_of_measurable_nnreal h‚ÇÇ)

lemma measurable_of_real : measurable ennreal.of_real :=
ennreal.continuous_of_real.measurable

lemma measurable_to_real : measurable ennreal.to_real :=
ennreal.measurable_of_measurable_nnreal nnreal.measurable_coe

lemma measurable_to_nnreal : measurable ennreal.to_nnreal :=
ennreal.measurable_of_measurable_nnreal measurable_id

lemma measurable_mul : measurable (Œª p : ennreal √ó ennreal, p.1 * p.2) :=
begin
  apply measurable_of_measurable_nnreal_nnreal,
  { simp only [‚Üê ennreal.coe_mul, measurable_mul.ennreal_coe] },
  { simp only [ennreal.top_mul, ennreal.coe_eq_zero],
    exact measurable_const.piecewise (is_measurable_singleton _) measurable_const },
  { simp only [ennreal.mul_top, ennreal.coe_eq_zero],
    exact measurable_const.piecewise (is_measurable_singleton _) measurable_const }
end

lemma measurable_sub : measurable (Œª p : ennreal √ó ennreal, p.1 - p.2) :=
by apply measurable_of_measurable_nnreal_nnreal;
  simp [‚Üê ennreal.coe_sub, continuous_sub.measurable.ennreal_coe]

end ennreal

lemma measurable.to_nnreal {f : Œ± ‚Üí ennreal} (hf : measurable f) :
  measurable (Œª x, (f x).to_nnreal) :=
ennreal.measurable_to_nnreal.comp hf

lemma measurable_ennreal_coe_iff {f : Œ± ‚Üí ‚Ñù‚â•0} :
  measurable (Œª x, (f x : ennreal)) ‚Üî measurable f :=
‚ü®Œª h, h.to_nnreal, Œª h, h.ennreal_coe‚ü©

lemma measurable.to_real {f : Œ± ‚Üí ennreal} (hf : measurable f) :
  measurable (Œª x, ennreal.to_real (f x)) :=
ennreal.measurable_to_real.comp hf

lemma measurable.ennreal_mul {f g : Œ± ‚Üí ennreal} (hf : measurable f) (hg : measurable g) :
  measurable (Œª a, f a * g a) :=
ennreal.measurable_mul.comp (hf.prod_mk hg)

lemma measurable.ennreal_add {f g : Œ± ‚Üí ennreal}
  (hf : measurable f) (hg : measurable g) : measurable (Œª a, f a + g a) :=
hf.add hg

lemma measurable.ennreal_sub {f g : Œ± ‚Üí ennreal} (hf : measurable f) (hg : measurable g) :
  measurable (Œª a, f a - g a) :=
ennreal.measurable_sub.comp (hf.prod_mk hg)

/-- note: `ennreal` can probably be generalized in a future version of this lemma. -/
lemma measurable.ennreal_tsum {Œπ} [encodable Œπ] {f : Œπ ‚Üí Œ± ‚Üí ennreal} (h : ‚àÄ i, measurable (f i)) :
  measurable (Œª x, ‚àë' i, f i x) :=
by { simp_rw [ennreal.tsum_eq_supr_sum], apply measurable_supr, exact Œª s, s.measurable_sum h }

section normed_group

variables [normed_group Œ±] [opens_measurable_space Œ±] [measurable_space Œ≤]

lemma measurable_norm : measurable (norm : Œ± ‚Üí ‚Ñù) :=
continuous_norm.measurable

lemma measurable.norm {f : Œ≤ ‚Üí Œ±} (hf : measurable f) : measurable (Œª a, norm (f a)) :=
measurable_norm.comp hf

lemma measurable_nnnorm : measurable (nnnorm : Œ± ‚Üí ‚Ñù‚â•0) :=
continuous_nnnorm.measurable

lemma measurable.nnnorm {f : Œ≤ ‚Üí Œ±} (hf : measurable f) : measurable (Œª a, nnnorm (f a)) :=
measurable_nnnorm.comp hf

lemma measurable_ennnorm : measurable (Œª x : Œ±, (nnnorm x : ennreal)) :=
measurable_nnnorm.ennreal_coe

lemma measurable.ennnorm {f : Œ≤ ‚Üí Œ±} (hf : measurable f) :
  measurable (Œª a, (nnnorm (f a) : ennreal)) :=
hf.nnnorm.ennreal_coe

end normed_group

section limits

variables [measurable_space Œ≤] [metric_space Œ≤] [borel_space Œ≤]

open metric

/-- A limit (over a general filter) of measurable `‚Ñù‚â•0` valued functions is measurable.
The assumption `hs` can be dropped using `filter.is_countably_generated.has_antimono_basis`, but we
don't need that case yet. -/
lemma measurable_of_tendsto_nnreal' {Œπ Œπ'} {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0} {g : Œ± ‚Üí ‚Ñù‚â•0} (u : filter Œπ)
  [ne_bot u] (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f u (ùìù g)) {p : Œπ' ‚Üí Prop}
  {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) : measurable g :=
begin
  rw [tendsto_pi] at lim, rw [‚Üê measurable_ennreal_coe_iff],
  have : ‚àÄ x, liminf u (Œª n, (f n x : ennreal)) = (g x : ennreal) :=
  Œª x, ((ennreal.continuous_coe.tendsto (g x)).comp (lim x)).liminf_eq,
  simp_rw [‚Üê this],
  show measurable (Œª x, liminf u (Œª n, (f n x : ennreal))),
  exact measurable_liminf' (Œª i, (hf i).ennreal_coe) hu hs,
end

/-- A sequential limit of measurable `‚Ñù‚â•0` valued functions is measurable. -/
lemma measurable_of_tendsto_nnreal {f : ‚Ñï ‚Üí Œ± ‚Üí ‚Ñù‚â•0} {g : Œ± ‚Üí ‚Ñù‚â•0}
  (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f at_top (ùìù g)) : measurable g :=
measurable_of_tendsto_nnreal' at_top hf lim at_top_countable_basis (Œª i, countable_encodable _)

/-- A limit (over a general filter) of measurable functions valued in a metric space is measurable.
The assumption `hs` can be dropped using `filter.is_countably_generated.has_antimono_basis`, but we
don't need that case yet. -/
lemma measurable_of_tendsto_metric' {Œπ Œπ'} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (u : filter Œπ) [ne_bot u] (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f u (ùìù g)) {p : Œπ' ‚Üí Prop}
  {s : Œπ' ‚Üí set Œπ} (hu : u.has_countable_basis p s) (hs : ‚àÄ i, (s i).countable) :
  measurable g :=
begin
  apply measurable_of_is_closed', intros s h1s h2s h3s,
  have : measurable (Œª x, inf_nndist (g x) s),
  { refine measurable_of_tendsto_nnreal' u (Œª i, (hf i).inf_nndist) _ hu hs, swap,
    rw [tendsto_pi], rw [tendsto_pi] at lim, intro x,
    exact ((continuous_inf_nndist_pt s).tendsto (g x)).comp (lim x) },
    have h4s : g ‚Åª¬π' s = (Œª x, inf_nndist (g x) s) ‚Åª¬π' {0},
    { ext x, simp [h1s, ‚Üê mem_iff_inf_dist_zero_of_closed h1s h2s, ‚Üê nnreal.coe_eq_zero] },
    rw [h4s], exact this (is_measurable_singleton 0),
end

/-- A sequential limit of measurable functions valued in a metric space is measurable. -/
lemma measurable_of_tendsto_metric {f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}
  (hf : ‚àÄ i, measurable (f i)) (lim : tendsto f at_top (ùìù g)) :
  measurable g :=
measurable_of_tendsto_metric' at_top hf lim at_top_countable_basis (Œª i, countable_encodable _)

end limits

namespace continuous_linear_map

variables {ùïú : Type*} [normed_field ùïú]
variables {E : Type*} [normed_group E] [normed_space ùïú E] [measurable_space E]
variables [opens_measurable_space E]
variables {F : Type*} [normed_group F] [normed_space ùïú F] [measurable_space F] [borel_space F]

protected lemma measurable (L : E ‚ÜíL[ùïú] F) : measurable L :=
L.continuous.measurable

lemma measurable_comp (L : E ‚ÜíL[ùïú] F) {œÜ : Œ± ‚Üí E} (œÜ_meas : measurable œÜ) :
  measurable (Œª (a : Œ±), L (œÜ a)) :=
L.measurable.comp œÜ_meas

end continuous_linear_map

section normed_space
variables {ùïú : Type*} [nondiscrete_normed_field ùïú] [complete_space ùïú] [measurable_space ùïú]
variables [borel_space ùïú]
variables {E : Type*} [normed_group E] [normed_space ùïú E] [measurable_space E] [borel_space E]

lemma measurable_smul_const {f : Œ± ‚Üí ùïú} {c : E} (hc : c ‚â† 0) :
  measurable (Œª x, f x ‚Ä¢ c) ‚Üî measurable f :=
measurable_comp_iff_of_closed_embedding (Œª y : ùïú, y ‚Ä¢ c) (closed_embedding_smul_left hc)

end normed_space

namespace measure_theory
namespace measure

variables [topological_space Œ±]

/-- A measure `Œº` is regular if
  - it is finite on all compact sets;
  - it is outer regular: `Œº(A) = inf { Œº(U) | A ‚äÜ U open }` for `A` measurable;
  - it is inner regular: `Œº(U) = sup { Œº(K) | K ‚äÜ U compact }` for `U` open. -/
structure regular (Œº : measure Œ±) : Prop :=
(lt_top_of_is_compact : ‚àÄ {{K : set Œ±}}, is_compact K ‚Üí Œº K < ‚ä§)
(outer_regular : ‚àÄ {{A : set Œ±}}, is_measurable A ‚Üí
  (‚®Ö (U : set Œ±) (h : is_open U) (h2 : A ‚äÜ U), Œº U) ‚â§ Œº A)
(inner_regular : ‚àÄ {{U : set Œ±}}, is_open U ‚Üí
  Œº U ‚â§ ‚®Ü (K : set Œ±) (h : is_compact K) (h2 : K ‚äÜ U), Œº K)

namespace regular

lemma outer_regular_eq {Œº : measure Œ±} (hŒº : Œº.regular) {{A : set Œ±}}
  (hA : is_measurable A) : (‚®Ö (U : set Œ±) (h : is_open U) (h2 : A ‚äÜ U), Œº U) = Œº A :=
le_antisymm (hŒº.outer_regular hA) $ le_infi $ Œª s, le_infi $ Œª hs, le_infi $ Œª h2s, Œº.mono h2s

lemma inner_regular_eq {Œº : measure Œ±} (hŒº : Œº.regular) {{U : set Œ±}}
  (hU : is_open U) : (‚®Ü (K : set Œ±) (h : is_compact K) (h2 : K ‚äÜ U), Œº K) = Œº U :=
le_antisymm (supr_le $ Œª s, supr_le $ Œª hs, supr_le $ Œª h2s, Œº.mono h2s) (hŒº.inner_regular hU)

protected lemma map [opens_measurable_space Œ±] [measurable_space Œ≤] [topological_space Œ≤]
  [t2_space Œ≤] [borel_space Œ≤] {Œº : measure Œ±} (hŒº : Œº.regular) (f : Œ± ‚âÉ‚Çú Œ≤) :
  (measure.map f Œº).regular :=
begin
  have hf := f.continuous.measurable,
  have h2f := f.to_equiv.injective.preimage_surjective,
  have h3f := f.to_equiv.surjective,
  split,
  { intros K hK, rw [map_apply hf hK.is_measurable],
    apply hŒº.lt_top_of_is_compact, rwa f.compact_preimage },
  { intros A hA, rw [map_apply hf hA, ‚Üê hŒº.outer_regular_eq (hf hA)],
    refine le_of_eq _, apply infi_congr (preimage f) h2f,
    intro U, apply infi_congr_Prop f.is_open_preimage, intro hU,
    apply infi_congr_Prop h3f.preimage_subset_preimage_iff, intro h2U,
    rw [map_apply hf hU.is_measurable], },
  { intros U hU, rw [map_apply hf hU.is_measurable, ‚Üê hŒº.inner_regular_eq (f.continuous U hU)],
    refine ge_of_eq _, apply supr_congr (preimage f) h2f,
    intro K, apply supr_congr_Prop f.compact_preimage, intro hK,
    apply supr_congr_Prop h3f.preimage_subset_preimage_iff, intro h2U,
    rw [map_apply hf hK.is_measurable] }
end

protected lemma smul {Œº : measure Œ±} (hŒº : Œº.regular) {x : ennreal} (hx : x < ‚ä§) :
  (x ‚Ä¢ Œº).regular :=
begin
  split,
  { intros K hK, exact ennreal.mul_lt_top hx (hŒº.lt_top_of_is_compact hK) },
  { intros A hA, rw [coe_smul],
    refine le_trans _ (ennreal.mul_left_mono $ hŒº.outer_regular hA),
    simp only [infi_and'], simp only [infi_subtype'],
    haveI : nonempty {s : set Œ± // is_open s ‚àß A ‚äÜ s} := ‚ü®‚ü®set.univ, is_open_univ, subset_univ _‚ü©‚ü©,
    rw [ennreal.mul_infi], refl', exact ne_of_lt hx },
  { intros U hU, rw [coe_smul], refine le_trans (ennreal.mul_left_mono $ hŒº.inner_regular hU) _,
    simp only [supr_and'], simp only [supr_subtype'],
    rw [ennreal.mul_supr], refl' }
end

end regular

end measure
end measure_theory
